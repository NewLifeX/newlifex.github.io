(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{204:function(e,t,o){"use strict";o.r(t);var d=o(0),a=Object(d.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{staticClass:"content"},[o("h1",{attrs:{id:"xcode-orm-介绍"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#xcode-orm-介绍","aria-hidden":"true"}},[e._v("#")]),e._v(" XCode ORM 介绍")]),e._v(" "),o("p",[o("img",{attrs:{src:"http://www.newlifex.com/templates/green/images/logo.png",alt:"XCode"}})]),e._v(" "),o("h2",{attrs:{id:"xcode-orm是什么"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#xcode-orm是什么","aria-hidden":"true"}},[e._v("#")]),e._v(" XCode ORM是什么?")]),e._v(" "),o("p",[e._v("XCode是一个超越了ORM范围的映射组件，除了对象到关系数据库的映射外，还有到网络和其它二进制形式等的映射，所以称之为数据映射组件。")]),e._v(" "),o("h2",{attrs:{id:"xcode具有哪些优势？"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#xcode具有哪些优势？","aria-hidden":"true"}},[e._v("#")]),e._v(" XCode具有哪些优势？")]),e._v(" "),o("ul",[o("li",[e._v("采用最好的分页算法，高效处理海量数据。\n数据分页的思想贯穿整个XCode的生命周期，任何一个不论大小的测试，数据样本都是单表一千万起。其它很多ORM，在数据达到百万之后会变慢，达到千万后基本上就卡死了。XCode同时支持最流行的几大数据库分页算法，经过10多年的经验积累，根据数据库类型、版本以及所处环境，自动选择最佳的分页算法。当前很多其它ORM要么仅支持一两种数据库的分页算法，要么采用的分页算法具有极大的局限性，要求所设计的数据表必须具有某种特征。")]),e._v(" "),o("li",[e._v("先进的多级缓存思想，保证最出色的性能。\nXCode在最重要的数据管道主线上拥有三级缓存设计，在其它地方拥有无数的缓存设计。缓存的设计，让使用XCode开发的系统在性能上能够轻易超越采用原生数据库操作开发的系统，甚至有成千上万倍的差距！几乎所有的ORM都基于原生数据库操作，理论上会比原生数据库操作要慢一点，只有极少数使用了缓存的ORM会比原生数据库操作要快一些，但远没有XCode这么多的缓存设计。")]),e._v(" "),o("li",[e._v("化繁为简，容易上手。\n最流行的Hibernate、EF等ORM框架，追求完美的支持所有功能，庞大无比，让很多使用者望而却步。而XCode的核心思想是让一切变得简单，变得更简单！甚至连多表关联查询都不支持，而建议分为多次单表查询。也正因为化繁为简，使得XCode能够采用更多的缓存，化繁为简与缓存思想互相促进，甚至可以让多次单表查询远快于单次多表关联查询。")]),e._v(" "),o("li",[e._v("抽象实体结构，支持多数据库的正向反向工程。\n绝大多数ORM只负责对象与关系数据库的数据映射，而少有数据结构的映射。正向功能能够取得数据库结构，便于代码生成器使用；反向工程能够根据实体结构创建数据表、修改数据表结构、删除数据表或字段等，所以采用XCode开发的系统，发布的时候都可以不需要附带初始数据库。正向工程反向工程均是XCode提出的概念，在08年之前，除了XCode外没有任何其它ORM支持反向工程。也正是因为实体结构映射这一设计，使得XCode超越ORM，发展成为可以把实体对象映射到其它非数据库的形式。")]),e._v(" "),o("li",[e._v("分布式支持。\n尽管XCode采用了最好的分页算法，但对于大型系统甚至超级系统来说，单表数千万乃至数亿的数据是远远不能满足要求的。不管从数据存储还是从性能瓶颈的角度来考虑，分布式是必然趋势！XCode原生支持分布式设计。单表拆成多表，拆分到不同数据库、不同数据库服务器，XCode能够完全屏蔽数据层，使用起来就跟一张超级大表一样。其它绝大多数ORM不会对分布式实行原生支持，需要分布式数据库或者极其昂贵的硬件来配合才能做到。")]),e._v(" "),o("li",[e._v("总的来说，最好的分页算法保证基本操作不犯错，化繁为简和多级缓存的设计保证XCode在性能上永无止境，所以，XCode的最大优势就是性能！")])])])}],!1,null,null,null);t.default=a.exports}}]);