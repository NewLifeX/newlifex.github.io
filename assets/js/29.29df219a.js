(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{196:function(t,e,i){"use strict";i.r(e);var s=i(0),a=Object(s.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"content"},[t._m(0),t._v(" "),i("ul",[i("li",[i("p",[t._v("即T4模板文件，"),i("code",[t._v("Text Template Transformation Toolkit")]),t._v("的简称，"),i("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/visualstudio/modeling/code-generation-and-t4-text-templates?view=vs-2017",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),i("OutboundLink")],1)])]),t._v(" "),t._m(1)]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),i("p",[t._v("曾经有同学使用虚拟机，Mac上用win10虚拟机，win10中使用Mac的映射磁盘，最后怎么生成都找不到生成的实体类，后面改成win10虚拟机的磁盘才可以。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"tt文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tt文件","aria-hidden":"true"}},[this._v("#")]),this._v(" tt文件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("从Nuget安装XCode之后，项目会出现"),e("code",[this._v("Build.tt")]),this._v("文件，并自动复制所需dll。. Net Core项目暂不支持此方式。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内容","aria-hidden":"true"}},[this._v("#")]),this._v(" 内容")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-t4 extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<#@ template language="C#" hostSpecific="true" debug="true" #>\n<#@ assembly name="$(SolutionDir)\\DLL\\NewLife.Core.dll" #>\n<#@ assembly name="$(SolutionDir)\\DLL\\XCode.dll" #>\n<#@ import namespace="System.Diagnostics" #>\n<#@ import namespace="System.IO" #>\n<#@ import namespace="XCode.Code" #>\n<#@ output extension=".log" #>\n<#\n    // 设置当前工作目录\n\tPathHelper.BaseDirectory = Host.ResolvePath(".");\n\t// 导入模型文件并生成实体类，模型文件、输出目录、命名空间、连接名\n\tEntityBuilder.Build();\n\n\t//var tables = DAL.ImportFrom("Company.Project.xml");\n\t//EntityBuilder.Build(tables);\n#>\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("$(SolutionDir)")]),this._v("代表当前项目解决方案文件所在目录，加上后面Dll的路径拼接成完整文件路径。所以如果没有自动复制可手动复制过去。")]),this._v(" "),e("li",[this._v("中间的内容就是设置基础目录，调用Build方法生成实体类，下面的注释演示另外的用法，更多用法可自行查看源码探索。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"使用方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用方式","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用方式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("右键该tt文件，选择"),e("strong",[this._v("运行自定义工具")]),this._v("，即可开始运行tt文件。第一次运行会因为需要初始化运行tt文件的资源，所以会稍微久一点，第二次开始会很快。")]),this._v(" "),e("li",[this._v("等鼠标转圈结束就代表运行结束，如果报错则会直接提示，比如找不到dll之类的。")]),this._v(" "),e("li",[this._v("把生成的实体类包含在项目中即可使用。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])}],!1,null,null,null);e.default=a.exports}}]);